---
layout:	post
title:	"CVE-2019–13561 Proof Of Concept"
date:	2021-07-01
medium_url: https://noob3xploiter.medium.com/cve-2019-13561-proof-of-concept-da8bd9b232e9
categories: [Hacking, Iot]
tags: [Hacking, Iot, Reverse Engineering, Binary Exploitation]
---

  This is a continuation of my writeup in <https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-a2f1689f9920> where i found and explained the bug that i found

I am not 100% sure if the bug i found in dlink dir-615 is actually the CVE-2019–13561 but according to the summary of the cve, it looks similar. So lets start.

From the previous writeup, we know that the vulnerable, variable is the ***check\_fw\_url ***that is stored in the in the nvram. I decided to where is the value of this ***check\_fw\_url*** is stored, so i used the command grep -irn check\_fw\_url to find out where this variable could be stored and it give me a hit.

![](/img/1*3o0d_xQEKGTbmzYDwuh5LQ.png)

It is stored in the file etc/nvram.default and its value looks like a url. So in theory, if we change the value of that variable, to check\_fw\_url=wrpd.dlink.com.tw,/router/firmware/query.asp?model=DIR-615\_Cx\_Default;reboot; , when the ***return\_online\_firmware\_check ***is called, it will execute our command injection and will reboot the system. So that is what i did

![](/img/1*ImBZAuyQTGuXODDu58Uovg.png)

Then i repacked the squashfs filesystem again using mksquashfs with the command mksquashfs squashfs-root test.squashfs. Now we cam emulate this firmware using firmware analysis toolkit <https://github.com/attify/firmware-analysis-toolkit>

![](/img/1*VcgWz5yitc36IQUb_pEmHw.png)

Now that we are emulating it, we can now try to replicate the rce. Before that, i tried to find where the text ***online\_firmware\_check.cgi*** exist and i found it in ***tools\_firmw\_chk.asp*** , so i quickly go to there [https://192.168.0.1/tools\_firmw\_chk.asp](https://192.168.0.1/tools_firmw_chk.asp)

Visiting the url shows no response, however, if you try to reload, you will get a This site can’t be reached indicating that indeed, our remote code execution worked and the server has rebooted

![](/img/1*SXiw_FiYmrdkf0PLFWfPAA.png)

Looking in the emulation, it also showed that indeed, it rebooted, meaning our code injection worked

![](/img/1*3a1kH7oNQaFGwOM521piOw.png)

So now, we can confirm that there is a remote code execution bug in the check\_fw\_url parameter.

There you have it. This is the poc of the CVE-2019–13561. I still havent found out where we can change the value of check\_fw\_url remotely, but i think it is possible somewhere. Thanks for reading.

Join the discord server: <https://discord.com/invite/bugbounty>

  